apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-check-dependencies
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-delete-policy: hook-succeeded,hook-failed
data:
  check-dependencies.sh: |
    #!/bin/sh

    check_chart_version() {
      CHART_NAME="$1"
      REQUIRED_VERSION="$2"

      DEPLOYED_VERSION=$(helm ls --filter "^${CHART_NAME}$" -o json | jq -r '.[].app_version')

      if [ "$DEPLOYED_VERSION" == "$REQUIRED_VERSION" ]; then
        echo "Required version of ${CHART_NAME} (${REQUIRED_VERSION}) is already deployed."
        return 0
      else
        echo "Required version of ${CHART_NAME} (${REQUIRED_VERSION}) is not deployed."
        return 1
      fi
    }

    # Define your dependencies here
    DEPENDENCIES=(
      "ngsa-memory:1.0"
    )

    ALL_DEPENDENCIES_MET=true

    for DEPENDENCY in "${DEPENDENCIES[@]}"; do
      CHART_NAME="${DEPENDENCY%%:*}"
      REQUIRED_VERSION="${DEPENDENCY#*:}"
      check_chart_version "${CHART_NAME}" "${REQUIRED_VERSION}"
      RESULT=$?

      if [ $RESULT -ne 0 ]; then
        ALL_DEPENDENCIES_MET=false
      fi
    done

    if [ "$ALL_DEPENDENCIES_MET" = true ]; then
      echo "All dependencies are met. Continuing."
      exit 0
    else
      echo "Not all dependencies are met. Exiting."
      exit 1
    fi
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Release.Name }}-check-dependencies
  annotations:
    helm.sh/hook: pre-install
    helm.sh/hook-delete-policy: hook-succeeded,hook-failed
spec:
  template:
    spec:
      volumes:
        - name: scripts
          configMap:
            name: {{ .Release.Name }}-check-dependencies
      containers:
        - name: check-dependencies
          image: alpine/helm:3.11.1
          command: ["/bin/sh"]
          args: ["/scripts/check-dependencies.sh"]
          volumeMounts:
            - name: scripts
              mountPath: /scripts
              readOnly: true
      restartPolicy: Never
